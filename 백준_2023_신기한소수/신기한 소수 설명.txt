4자리 수가 1234이면 1, 12, 123, 1234 4가지 경우를 소수인지 아닌지 체크해야한다.

그래서 dfs를 사용하여 N가지 경우의 수가 소수인지 아닌지 확인을 했다.

처음에는 Math.sqrt()까지 돌리면서 소수인지 아닌지 확인을 했다. 답은 나왔으나 8자리의 숫자의 경우 시간초과가 나는 문제점이 있었다.

그래서 소수를 구하는 알고리즘을 검색해보았는데 에라토스테네스의 해라는 알고리즘이 있었다.

근데 이 알고리즘은 2의 배수빼고 3의 배수빼고 ... 이런 식으로 진행하는 것이라서 시간초과 문제를 해결해 줄 수 없을 것 같았다.

그래서 생각해본 결과 내 코드에서는 N자리 숫자일 경우 1자리 숫자인 경우부터 소수인지 아닌지 체크를 하는데 어짜피 마지막 숫자가 2,4,6,8,0으로 끝나면 2의 배수이므로 굳이 소수인지 아닌지를 체크할 필요가 없을 것 같았다.

그래서 끝자리가 2,4,6,8,0인 경우를 제외하고 풀었다.

근데 만약에 한자리 숫자만 체크하는 경우 일때는 2는 소수이므로 2인 경우는 제외해주었다.
